datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_NEON_DATABASE_URL")
}

generator client {
    provider   = "prisma-client-js"
    engineType = "library"
}

enum UserRole {
    CREATOR
    USER
    ADMIN
}

model User {
    id            String          @id @default(cuid())
    accounts      Account[]
    sessions      Session[]
    created_at    DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    role          UserRole        @default(USER)
    authenticator Authenticator[]
    posts         Post[]
    comments      Comment[]
    likes         Like[]
    profile       Profile?
    password      String
}

model Profile {
    id             String    @id @default(cuid())
    first_name     String
    last_name      String
    email_or_phone String    @unique
    email_verified DateTime?
    image          String?
    bio            String?
    user           User      @relation(fields: [user_id], references: [id])
    user_id        String    @unique
}

model Account {
    user_id             String
    type                String
    provider            String
    provider_account_id String
    refresh_token       String?
    access_token        String?
    expires_at          Int?
    token_type          String?
    scope               String?
    id_token            String?
    session_state       String?

    created_at DateTime @default(now())
    updatedAt  DateTime @updatedAt

    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@id([provider, provider_account_id])
}

model Session {
    session_token String   @unique
    user_id       String
    expires       DateTime
    user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

    created_at DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credential_id          String  @unique
    user_id                String
    provider_account_id    String
    credential_public_key  String  @map("credential_public_key")
    counter                Int
    credential_device_type String
    credential_backed_up   Boolean
    transports             String?

    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@id([user_id, credential_id])
}

// Blog Schema

model Post {
    id          String    @id @default(cuid())
    created_at  DateTime  @default(now())
    updated_at  DateTime  @updatedAt
    title       String
    content     String?
    cover_image String?
    images      String[]
    published   Boolean   @default(false)
    view_count  Int       @default(0)
    creator     User      @relation(fields: [creator_id], references: [id])
    creator_id  String
    tags        Tag[]
    comments    Comment[]
    likes       Like[]
}

model Comment {
    id         String   @id @default(cuid())
    content    String
    created_at DateTime @default(now())
    post       Post     @relation(fields: [post_id], references: [id])
    post_id    String
    user       User     @relation(fields: [user_id], references: [id])
    user_id    String
}

model Like {
    id      String @id @default(cuid())
    post    Post   @relation(fields: [post_id], references: [id])
    post_id String
    user    User   @relation(fields: [user_id], references: [id])
    user_id String

    @@unique([post_id, user_id])
}

model Tag {
    id    String @id @default(cuid())
    name  String @unique
    posts Post[]
}
