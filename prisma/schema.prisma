generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_NEON_DATABASE_URL")
}

model User {
  id            String          @id
  updatedAt     DateTime        @updatedAt
  created_at    DateTime        @default(now())
  role          UserRole        @default(USER)
  clerk_id      String
  accounts      Account[]
  authenticator Authenticator[]
  comments      Comment[]
  likes         Like[]
  posts         Post[]
  profile       Profile?
  sessions      Session[]
}

model Profile {
  id             String    @id @default(cuid())
  first_name     String
  last_name      String
  email_or_phone String    @unique
  email_verified DateTime?
  image          String?
  bio            String?
  user_id        String    @unique
  user           User      @relation(fields: [user_id], references: [id])
}

model Account {
  type                String
  provider            String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  updatedAt           DateTime @updatedAt
  created_at          DateTime @default(now())
  provider_account_id String
  user_id             String
  user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([provider, provider_account_id])
}

model Session {
  expires       DateTime
  updatedAt     DateTime @updatedAt
  created_at    DateTime @default(now())
  session_token String   @unique
  user_id       String
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  counter                Int
  transports             String?
  credential_backed_up   Boolean
  credential_device_type String
  credential_id          String  @unique
  credential_public_key  String  @map("credential_public_key")
  provider_account_id    String
  user_id                String
  user                   User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, credential_id])
}

model Post {
  id          String    @id @default(cuid())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  title       String
  content     String?
  cover_image String?
  images      String[]
  published   Boolean?  @default(false)
  view_count  Int       @default(0)
  creator_id  String
  slug        String    @unique
  comments    Comment[]
  likes       Like[]
  creator     User      @relation(fields: [creator_id], references: [id])
  tags        Tag[]     @relation("PostToTag")
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  created_at DateTime @default(now())
  post_id    String
  user_id    String
  post       Post     @relation(fields: [post_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])
}

model Like {
  id      String @id @default(cuid())
  post_id String
  user_id String
  post    Post   @relation(fields: [post_id], references: [id])
  user    User   @relation(fields: [user_id], references: [id])

  @@unique([post_id, user_id])
}

model Tag {
  id    String @id @default(cuid())
  name  String
  posts Post[] @relation("PostToTag")
}

enum UserRole {
  CREATOR
  USER
  ADMIN
}
